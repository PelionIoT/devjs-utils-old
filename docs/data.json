{
    "project": {},
    "files": {
        "devjsUtils.js": {
            "name": "devjsUtils.js",
            "modules": {},
            "classes": {
                "deviceJSUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "orderedTable.js": {
            "name": "orderedTable.js",
            "modules": {
                "utils": 1
            },
            "classes": {
                "orderedTable": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "utils": {
            "name": "utils",
            "submodules": {},
            "elements": {},
            "classes": {
                "deviceJSUtils": 1,
                "orderedTable": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "orderedTable.js",
            "line": 14
        }
    },
    "classes": {
        "deviceJSUtils": {
            "name": "deviceJSUtils",
            "shortname": "deviceJSUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "utils",
            "file": "devjsUtils.js",
            "line": 79,
            "is_constructor": 1,
            "params": [
                {
                    "name": "_devjs",
                    "description": "A deviceJS instance. typically `dev$`",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "An options object",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n```\nvar utils = require(\"devjs-utils\").instance(dev$);\nconsole.log(\"Getting heiarchy\");\n\nvar ans = utils.getHierarchy().then(function(ans){\n   var s= JSON.stringify(ans);\n   console.log(s);\n});\n``` "
            ]
        },
        "orderedTable": {
            "name": "orderedTable",
            "shortname": "orderedTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "utils",
            "namespace": "",
            "file": "orderedTable.js",
            "line": 14,
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "devjsUtils.js",
            "line": 1,
            "description": "Created by ed on 11/6/15.",
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 150,
            "description": "Handles the details of setting up a listener for a device event, with a callback. The callback will fire for `event_name`\nfor up to the default TTL or `custom_ttl`. After this, the callback will be purged. If there are no callback assigned for\nan event, or they all timeout, then the listener is stopped. A single unique callback will never be in the list more than\nonce, and if called again on the same `callback` / `uniq` combination, the TTL value the purge time is just reset.\n\nThis function may be called more than once with the same unique identifier with no harm done. This allows a caller\nto just always assign a callback, and if the code stops running, eventually the callback is cleared out.\n\nThis function is more efficient than setting up your own listeners per device, b/c it listens to all devices, and \nthen calls the needed callbacks based on the event.",
            "itemtype": "method",
            "name": "listenToDevice",
            "params": [
                {
                    "name": "id",
                    "description": "The device ID.",
                    "type": "String"
                },
                {
                    "name": "event_name",
                    "description": "The event name of interest. For example `\"unreachable\"`",
                    "type": "String"
                },
                {
                    "name": "uniq",
                    "description": "A unique string of some sort.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to be called.",
                    "type": "Function"
                },
                {
                    "name": "custom_ttl",
                    "description": "A number in milliseconds to timeout the callback. If not stated a default is used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 273,
            "description": "This asks deviceJS for all devices. It then stores all this as cache, so that if you ask for individual\ndevices, their status is already there. This is to speed up initial load of a web interface or mobile UI\nwhich wants to ask for certain devices. A single call to deviceJS is much quicker. This gets the end user\nout of the task of dealing with this.\n\nThis is not a cached call. It will overwrite all cached data. Always fulfills",
            "itemtype": "method",
            "name": "preloadDeviceStatus",
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 334,
            "description": "Invalidates devjs-utils internal graph, so that the next time a call is used\nwhich needs the graph, it will be pulled again from the deviceJS runtime.",
            "itemtype": "method",
            "name": "invalidateGraph",
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 345,
            "description": "Invalidates the devjs-utils internal cache for resources.",
            "itemtype": "method",
            "name": "invalidateResources",
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 355,
            "description": "A cached call to `dev$.getResourceGroup('')`",
            "return": {
                "description": "which fulfills with the resource tree.",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 546,
            "description": "given an array of device IDs, this will show only device IDs which have an interface for their\ntype which match a given regex",
            "itemtype": "method",
            "name": "filterDeviceListByInterfaceRegex",
            "params": [
                {
                    "name": "deviceids",
                    "description": "List of device IDs",
                    "type": "Array"
                },
                {
                    "name": "interfacefilter",
                    "description": "A RegExp for filtering",
                    "type": "RegExp"
                }
            ],
            "return": {
                "description": "A Promise which fulfills with an array which is a subset of the device ID array \nthat have a matching interface for the given filter",
                "type": "Promse"
            },
            "example": [
                "\n```\n   dev$UtilsDEBUG.filterDeviceListByInterfaceRegex(['0017880a7876-1','LIFXd073d502b6ef','TunnelMonitor'],/Facades/)\n```   \nmight return a Promise which fulfills with:\n```\n      {\n         devices: [\"LIFXd073d502b6ef\",\"0017880a7876-1\"],\n         interfaces: [\"Facades/hasWhiteTemp\",\"Facades/Colorable\",\"Facades/Switchable\",\"Facades/Dimmable\"]\n      }\n```"
            ],
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 609,
            "description": "A utility to get the device heirarchy already flattened and parsed.\nProvides the device hierarchy in three ways in an object which resolves as a complex object.",
            "itemtype": "method",
            "name": "getHierarchy",
            "example": [
                "\n```\ndev$UtilsDEBUG.getHierarchy().then(function(v){\n   console.log(JSON.stringify(v));\n});\n```\nmight return\n```\n{\n   \"hierarchy\":{\n      \"children\":{\n         \"Dining Area\":{\n            \"children\":{\n               \"Subloc1\":{\n                  \"children\":{\n\n                  },\n                  \"resources\":{\n                     \"WWFL000010\":{\n\n                     }\n                  }\n               }\n            },\n            \"resources\":{\n               \"WWFL00000Z\":{\n\n               }\n            }\n         },\n         \"Upstairs\":{\n            \"children\":{\n\n            },\n            \"resources\":{\n               \"WWFL000010\":{\n\n               },\n               \"WWFL000016\":{\n\n               }\n            }\n         }\n      },\n      \"resources\":{\n\n      }\n   },\n   \"allDevices\":{\n      \"WWFL00000Z\":{\n         \"location\":\"Dining Area\"\n      },\n      \"WWFL000010\":{\n         \"location\":\"Dining Area/Subloc1\"\n      },\n      \"WWFL000016\":{\n         \"location\":\"Upstairs\"\n      }\n   },\n   \"allLocationPaths\":{\n      \"Dining Area\":{\n         \"children\":[\n            \"Subloc1\"\n         ],\n         \"resources\":[\n            \"WWFL00000Z\"\n         ],\n         \"allResources\":{     // all resources under this location & its sublocations\n            \"WWFL00000Z\":1,\n            \"WWFL000010\":1\n         },\n         \"childInterfaces\":{  // all interfaces under this location & its children\n            Core/Interfaces/Unpairable: 1,\n            Facades/Colorable: 1,\n            Facades/Dimmable: 1,\n            Facades/Switchable: 1,\n            Facades/hasWhiteTemp: 1\n         },\n         \"childTypes\":{\n            \"Core/Devices/Lighting/WigwagDevices/Filament\":1\n         }\n      },\n      \"Upstairs\":{\n         \"children\":[\n\n         ],\n         \"resources\":[\n            \"WWFL000010\",\n            \"WWFL000016\"\n         ],\n         \"allResources\":{\n            \"WWFL000010\":1,\n            \"WWFL000016\":1\n         },\n         \"childInterfaces\":{\n            Core/Interfaces/Unpairable: 1,\n            Facades/Colorable: 1,\n            Facades/Dimmable: 1,\n            Facades/Switchable: 1,\n            Facades/hasWhiteTemp: 1\n         },\n         \"childTypes\":{\n            \"Core/Devices/Lighting/WigwagDevices/Filament\":1\n         }\n      },\n      \"Dining Area/Subloc1\":{\n         \"children\":[\n\n         ],\n         \"resources\":[\n            \"WWFL000010\"\n         ],\n         \"allResources\":{\n            \"WWFL000010\":1\n         },\n         \"childInterfaces\":{\n            Core/Interfaces/Unpairable: 1,\n            Facades/Colorable: 1,\n            Facades/Dimmable: 1,\n            Facades/Switchable: 1,\n            Facades/hasWhiteTemp: 1\n         },\n         \"childTypes\":{\n            \"Core/Devices/Lighting/WigwagDevices/Filament\":1\n         }\n      }\n   }\n}\n```"
            ],
            "return": {
                "description": "resolves with said object",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 762,
            "description": "Return a Promise which fulfills with a list of devices which are not in any resource groups.",
            "itemtype": "method",
            "name": "listUnplacedDevices",
            "return": {
                "description": "Promise which fulfills with above object",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 784,
            "description": "Return a Promise which fulfills with a list of devices which are in at least one resource group.",
            "itemtype": "method",
            "name": "listPlacedDevices",
            "return": {
                "description": "Promise which fulfills with above object",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 807,
            "description": "Returns an Array of all device names. This will used cache if available.",
            "itemtype": "method",
            "name": "listAllDevices",
            "return": {
                "description": "Promise which fulfills with above object",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 828,
            "description": "Build a list of the format \n```[{ 'IDabc' : { \n        registered: true, \n        reachable: false, \n        [ other data... ] \n   }, 'IDxyz' : { \n       registered: ...\n       ...\n   }, \n   ... more devices\n   ]\n```\nfrom a given list of device IDs. If a device ID is not known by deviceJS it is reported `null`",
            "itemtype": "method",
            "name": "listDeviceStatus",
            "params": [
                {
                    "name": "list",
                    "description": "List of device IDs to provide status, as an `Array` of `String`",
                    "type": "Array|device ID"
                }
            ],
            "return": {
                "description": "which will resolve to the given list",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 905,
            "description": "returns a list of devices which are accounted for by deviceJS but are not in the given\nArray of device IDs. The collection should be keyed by resource ID.",
            "itemtype": "method",
            "name": "listExcludedResourceIDs",
            "params": [
                {
                    "name": "list",
                    "description": "of device IDs",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "resolves to an Array of device IDs not in 'list'",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 929,
            "description": "list all interface types",
            "itemtype": "method",
            "name": "listInterfaceTypes",
            "return": {
                "description": "a Promise which fulfills with state value",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 965,
            "description": "Get a list of types from a list of devices",
            "itemtype": "method",
            "name": "listTypesOfDevices",
            "params": [
                {
                    "name": "id",
                    "description": "A string or Array of device IDs",
                    "type": "Array|string"
                }
            ],
            "return": {
                "description": "which fulfills with an Array of 'Resource Types' the device(s) belongs to. The list is in no particular order.",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 1056,
            "description": "Lists all resource types know about by deviceJS",
            "itemtype": "method",
            "name": "listResourceTypes",
            "return": {
                "description": "which will resolve to the given list",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 1086,
            "description": "Get a list of interfaces from a list of resource types.",
            "itemtype": "method",
            "name": "listInterfacesOfTypes",
            "params": [
                {
                    "name": "id",
                    "description": "A string or Array of device IDs",
                    "type": "Array|string"
                }
            ],
            "return": {
                "description": "which fulfills with an Array of 'Interfaces' the 'Resource Type(s)' implement. The list is in no particular order.",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 1128,
            "description": "Get a list of interfaces a device implements",
            "itemtype": "method",
            "name": "listInterfacesOfDevices",
            "params": [
                {
                    "name": "id",
                    "description": "A string or Array of device IDs",
                    "type": "Array|string"
                }
            ],
            "return": {
                "description": "which fulfills with an Array of Interfaces the device(s) implement. The list is in no particular order.",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 1188,
            "description": "NOT IMPLEMENTED\nThis uses dev$.forgetResource() to remove resources which are:\n- not in a location\n- not registered (and not reachable)\nThese are usually devices deviceJS saw, but were never onboarded by a UI, and are now \nno longer existant.",
            "return": {
                "description": "Fullfils on completion. Always fulfills unless deviceJS is down.",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 1207,
            "description": "Moves a device from one resource group to another by stated paths. Places the device in the given resource group\nthen removes the device from the other resouece group.",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "id",
                    "description": "The device ID of the resource",
                    "type": "String"
                },
                {
                    "name": "frompath",
                    "description": "The String path where the device should 'moved' from.",
                    "type": "String"
                },
                {
                    "name": "topath",
                    "description": "The String path where the device should 'moved' to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A Promise which fulfills when the entire operation is complete",
                "type": "Promise"
            },
            "class": "deviceJSUtils"
        },
        {
            "file": "devjsUtils.js",
            "line": 1222,
            "description": "This works just like the 'mv' command in Unix. A new resource group is created, if it does not already exist. All devices are joined to\nthis resource group, then devices are removed form the old resource group, then the empty resource group is removed. 'sub resource groups'\nor 'folders' (if looking at it using the file system metaphor) are supported, and the function will recursively handle them.",
            "itemtype": "method",
            "name": "moveResourceGroup",
            "params": [
                {
                    "name": "from",
                    "description": "a path",
                    "type": "String"
                },
                {
                    "name": "to",
                    "description": "new path",
                    "type": "String"
                },
                {
                    "name": "graph",
                    "description": "Optional. results from dev$.getResourceGroup('') If not provided this will be pulled from\ncache in devJSUtils",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "deviceJSUtils"
        },
        {
            "file": "orderedTable.js",
            "line": 24,
            "description": "Add one or more items to the ordered list - to the back of the list. The items are added in order of their parameter list.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "item",
                    "description": "Add items to the list",
                    "type": "Any",
                    "multiple": true
                }
            ],
            "return": {
                "description": "If one item is added, a single unique string ID is returned. If more than one is added, an array of strings is returned. \nThese ids can later be used to <code>remove</code> the items.",
                "type": "String|array"
            },
            "class": "orderedTable",
            "module": "utils"
        },
        {
            "file": "orderedTable.js",
            "line": 54,
            "description": "Replace or add an item with a specified ID.<br>\n<i>Normally orderedTable generates an ID for each item. This function requires you to pass in a unique ID. If this is the ID to an existing item\nthe item is simply replaced.</i>",
            "itemtype": "method",
            "name": "replaceAdd",
            "params": [
                {
                    "name": "id",
                    "description": "The ID to use to uniquely reference the item.",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The item to store in the table",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "returns <code>item</code> if the item already existed, or <code>null</code> otherwise.",
                "type": "Boolean"
            },
            "class": "orderedTable",
            "module": "utils"
        },
        {
            "file": "orderedTable.js",
            "line": 75,
            "description": "Looks up one or more items by their ID",
            "return": {
                "description": "",
                "type": "Array|any"
            },
            "class": "orderedTable",
            "module": "utils"
        },
        {
            "file": "orderedTable.js",
            "line": 102,
            "description": "Add one or more items to the ordered list - adding each item in front of all other items.",
            "itemtype": "method",
            "name": "addToFront",
            "params": [
                {
                    "name": "item",
                    "description": "Add items to the list. If more than one item, the last item in the arguments will be the first item in the list.",
                    "type": "Any",
                    "multiple": true
                }
            ],
            "return": {
                "description": "If one item is added, a single unique string ID is returned. If more than one is added, an array of strings is returned. \nThese ids can later be used to <code>remove</code> the items.",
                "type": "String|array"
            },
            "class": "orderedTable",
            "module": "utils"
        },
        {
            "file": "orderedTable.js",
            "line": 126,
            "description": "Calls a function for each item in the list.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "func",
                    "description": "The callback function.<br>\n<code>callback(val,id,order)</code><br>\n<code>id</code> is the the unique ID of the element in the list<br>\n<code>order</code> is the zero-based order of the item in the list<br><br>\n<code>this</code> for the <code>callback</code> is the item in the list<br><br>\nNOTE: It is safe to use <code>orderedTable.remove()</code> during this call.",
                    "type": "[type]"
                }
            ],
            "class": "orderedTable",
            "module": "utils"
        },
        {
            "file": "orderedTable.js",
            "line": 146,
            "description": "Remove items from the ordered list.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": "one or more id values. These value correspond to a certain item in the list. These item(s) will be removed.",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "A single item, null if nothing, or an Array of multiple items.",
                "type": "Any|Array"
            },
            "class": "orderedTable",
            "module": "utils"
        },
        {
            "file": "orderedTable.js",
            "line": 174,
            "description": "Removes all elements, clears list.",
            "itemtype": "method",
            "name": "removeAll",
            "class": "orderedTable",
            "module": "utils"
        },
        {
            "file": "orderedTable.js",
            "line": 185,
            "description": "Returns an ordered list of the items in the table, in the same order the items were put in (FIFO).",
            "itemtype": "method",
            "name": "getList",
            "return": {
                "description": "an array of the items in their original order."
            },
            "class": "orderedTable",
            "module": "utils"
        },
        {
            "file": "orderedTable.js",
            "line": 198,
            "description": "Returns an ordered list of the items in the table, in the reverse of the order the items were put in (FILO).",
            "itemtype": "method",
            "name": "getReverseList",
            "return": {
                "description": "an array of the items in their reverse order."
            },
            "class": "orderedTable",
            "module": "utils"
        },
        {
            "file": "orderedTable.js",
            "line": 212,
            "description": "Removes an item by its order in the table.",
            "params": [
                {
                    "name": "n",
                    "description": "The zero-based order of the item to remove",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "Returns undefined if order value too high and nothing removed.",
                "type": "Any"
            },
            "class": "orderedTable",
            "module": "utils"
        },
        {
            "file": "orderedTable.js",
            "line": 229,
            "description": "Replace an item by order. An item must already exist for this to work.<br>",
            "itemtype": "method",
            "name": "replaceAdd",
            "params": [
                {
                    "name": "n",
                    "description": "The zero-based order of the item",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The item to store in the table",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "the original item that was replaced",
                "type": "Any"
            },
            "class": "orderedTable",
            "module": "utils"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " devjsUtils.js:609"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " devjsUtils.js:828"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " devjsUtils.js:1056"
        },
        {
            "message": "Missing item type\nCreated by ed on 11/6/15.",
            "line": " devjsUtils.js:1"
        },
        {
            "message": "Missing item type\nA cached call to `dev$.getResourceGroup('')`",
            "line": " devjsUtils.js:355"
        },
        {
            "message": "Missing item type\nNOT IMPLEMENTED\nThis uses dev$.forgetResource() to remove resources which are:\n- not in a location\n- not registered (and not reachable)\nThese are usually devices deviceJS saw, but were never onboarded by a UI, and are now \nno longer existant.",
            "line": " devjsUtils.js:1188"
        },
        {
            "message": "Missing item type\nLooks up one or more items by their ID",
            "line": " orderedTable.js:75"
        },
        {
            "message": "Missing item type\nRemoves an item by its order in the table.",
            "line": " orderedTable.js:212"
        }
    ]
}